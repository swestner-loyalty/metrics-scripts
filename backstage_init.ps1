


function Main{

    $includedFile = '*.md', 'swagger.yaml', 'swagger.json'
    $exludedFile = 'CHANGELOG.md','level?.md', 'scorecard*', 'PULL_REQUEST_TEMPLATE.md'

    $repos = Get-Repos -businessCritical -mockData
    $curDir = $PWD

    $results = ""
    
    foreach($repo in $repos){
        Add-RepoLocally -repo $repo
        cd $repo.Path

        $paths = Get-ChildItem -File -Recurse -Include $includedFile -Exclude  $exludedFile | Resolve-path -Relative |%{$_.Replace('.\','')}

        $filesSystem = ConvertTo-FileHierarchy -paths $paths
        $menu = ConvertTo-Yaml $filesSystem 
    
        
        Out-MkDocs -repo $repo -nav $menu

        #New-PullRequest $repo

        cd $curDir

    }

    $results

}

function Out-MkDocs{
    param(
    [Parameter(ValueFromPipeline)]
    $nav,
    [Parameter(Position=0)]
    $repo   
    )

   $temp = '/temp/repo/results'
    
    $template = Get-YamlTemplate
    
    $content = $template.Replace('{repoName}', $repo.Name).Replace('{nav}', $nav)
    
    $savePath = Join-Path $temp  "$($repo.Name)_mkdocs.yaml"

    $content | Out-File $savePath

}
function Get-YamlTemplate {
    
    return @'
    site_name: '{repoName}'

nav: 
  {nav}

plugins:
  - techdocs-core
'@
    
}
function ConvertTo-FileHierarchy {
    param (
        [Parameter(Position = 0, Mandatory = $true)]
        [string[]]
        $paths,

        [Parameter(Position = 1)]
        [string[]]
        $exclusions = @("src", "main", "resources", "docs", "appendix", "external", "internal", ".git")
    )

    $root = @{
        files = @{}
        directories = @{}
    }

    foreach ($path in $paths) {
        $segments = $path -split '\\'

        $currentFiles = $root['files']
        $currentDirectories = $root['directories']

        for ($i = 0; $i -lt $segments.Length - 1; $i++) {
            $segment = $segments[$i]
            if ($exclusions.Contains($segment)) {
                continue
            }

            if (-not $currentDirectories.ContainsKey($segment)) {
                $currentDirectories[$segment] = @{
                    files = @{}
                    directories = @{}
                }
            }

            $currentFiles = $currentDirectories[$segment]['files']
            $currentDirectories = $currentDirectories[$segment]['directories']
        }

        $lastSegment = $segments[-1]
        if (-not $currentFiles.ContainsKey($lastSegment) -and -not $Exclusions.Contains($lastSegment)) {
            $currentFiles[$lastSegment] = $path
        }
    }

    return $root
}

function ConvertTo-Yaml {
    param (
        [Parameter(Position = 0, Mandatory = $true)]
        [hashtable]
        $fileStructure,
        [int]
        $indentLevel = 0
    )

    $menu = ""
    $indent = " " * $indentLevel

    foreach ($fileEntry in $fileStructure['files'].Keys) {
        $name = Get-FormattedName $fileEntry
        $value = $fileStructure['files'][$fileEntry]  
        $menu += "${indent}- $name : $value`n"
    }

    foreach ($directoryEntry in $fileStructure['directories'].Keys) {
        $name = Get-FormattedName $directoryEntry
        $value = $fileStructure['directories'][$directoryEntry]
        $menu += "${indent}- $name`n"
        $menu += ConvertTo-Yaml -fileStructure $value -indentLevel ($indentLevel + 2) | ForEach-Object {
            "${indent}  $_"
        }
    }

    return $menu
}


function Get-FormattedName{
    param(
        [Parameter(position=0, ValueFromPipeline)]
        $name
        )

        $name = switch -Regex ($name){
                     '(?i)^(README|_index)\.md$'{ "Home";break }
                     '(?i)^(?<name>.+)README\.md' {$matches["name"];break}
                     '(?i)^README(?<name>.+)\.md'  {$matches["name"];break}
                     '(?i)(?<name>.*)' {$matches["name"];break}
                 }

        return $name | ConvertTo-TitleCase | ConvertTo-ReadableFormat
}

function ConvertTo-ReadableFormat{
    param(
        [Parameter(position=0, ValueFromPipeline)]
        $toConvert
        )

    $toReplace = "(-|_)"
    $toRemove = "(?i)(\.md|\.)"

    return $toConvert -replace $toReplace, " " -replace $toRemove, ""
}
    
function ConvertTo-TitleCase{
    param(
        [Parameter(position=0, ValueFromPipeline)]
        $toConvert
        )
        
    return (Get-Culture).TextInfo.ToTitleCase($toConvert.ToLower())
}

function New-PullRequest{
    param(
        $repo
    )


    $branch = 'backstage-setup'
    $prTitle = 'Backstage mkdocs Autogeneration'
    $prMessage = 'Collects all mds in a repository and creates a menu system based on the directory structure to autogenerated mkdoc file'

    $originalPath = (gi .).FullName
    cd $repo.Path
    
    $defaultBranch = gh repo view --json defaultBranchRef --jq .defaultBranchRef.name

    git checkout -b $branch
    git add --all
    git commit -am $prMessage
    git push origin 'backstage-setup'

    gh pr create --base $defaultBranch --head $branch --title $prMessage --body $prMessage 
}


function Add-RepoLocally{
    param(
        $repo
    )

    $originalPath = (gi .).FullName

    if(!(Test-Path $repo.Path)){
        git clone $repo.Url --depth=1 $repo.Path                
    }

    cd $repo.Path

    $currentBranch = git branch --show-current
    $defaultBranch = gh repo view --json defaultBranchRef --jq .defaultBranchRef.name

    #if we want to rip out gh, we could probably use something like the below line to get the default branch since we are cloning all the repos we are opertaing on (vs authoring them)
    #git symbolic-ref --short refs/remotes/origin/HEAD

    if($currentBranch -ne $defaultBranch){
        git stash       
    }

    git fetch origin $defaultBranch
    git merge -s recursive -X theirs origin/$defaultBranch

    cd $originalPath
}

function Get-Repos{
    param(
        $yearsOld = 0,
        [switch] $businessCritical,
        [switch] $mockData,
        $org = "loyaltyone"
    )

    if($mockData){
        return Get-MockDataJson
    }

    $cmd = "gh repo list $org --limit 2000"

    if($businessCritical){
        $cmd += " --topic 'business-critical'"
    }

    $repos = Invoke-Command $cmd  | ConvertFrom-Csv -Delimiter "`t" -header repo,desc,status,date

    if($yearsOld -gt 0){
        $repos = $repos | Where-Object{$_.date -gt $cutoff}
    }

    $mapped = $repos | ForEach-Object{ [PSCustomObject]@{
        Name = $_.repo.Split('/')[1]
        Url = "https://github.com/$($_.repo)"
        Path = "$root\$($_.repo.Split('/')[1])"
        Date = $_.Date
        Repo = $_.Repo
        }
    }
    return $mapped
}

function Get-MockDataJson{
    [CmdletBinding()]
    param(
        [parameter(Position=0)]
        [ValidateRange(1,10)]
        [int]
        $numItems = 10
    )

       $data = ConvertFrom-Json '[ {
        "Name":  "API-Guidelines",
        "Url":  "https://github.com/LoyaltyOne/API-Guidelines",
        "Path":  "c:\\temp\\repos\\API-Guidelines",
        "Date":  "2022-11-22T18:44:44Z",
        "Repo":  "LoyaltyOne/API-Guidelines",
        "Topics":  ""
       },
       {
                "Name":  "airmiles-aem",
        "Url":  "https://github.com/LoyaltyOne/airmiles-aem",
        "Path":  "c:\\temp\\repos\\airmiles-aem",
        "Date":  "2022-11-22T18:44:44Z",
        "Repo":  "LoyaltyOne/airmiles-aem",
        "Topics":  "team-goat"
        },      
      {
          "Name":  "transaction-summary-consumer",
          "Url":  "https://github.com/LoyaltyOne/transaction-summary-consumer",
          "Path":  "c:\\temp\\repos\\transaction-summary-consumer",
          "Date":  "2022-11-22T18:05:28Z",
          "Repo":  "LoyaltyOne/transaction-summary-consumer",
          "Topics":  "teamfusion"
      },
      {
          "Name":  "promotion-service",
          "Url":  "https://github.com/LoyaltyOne/promotion-service",
          "Path":  "c:\\temp\\repos\\promotion-service",
          "Date":  "2022-11-22T16:32:19Z",
          "Repo":  "LoyaltyOne/promotion-service",
          "Topics":  "team-things"
      },
      {
          "Name":  "aem-airmiles-web",
          "Url":  "https://github.com/LoyaltyOne/aem-airmiles-web",
          "Path":  "c:\\temp\\repos\\aem-airmiles-web",
          "Date":  "2022-11-22T14:19:09Z",
          "Repo":  "LoyaltyOne/aem-airmiles-web",
          "Topics":  [
                         "team-goat",
                         "team-atsops"
                     ]
      },
            {
          "Name":  "airmiles-web-bff",
          "Url":  "https://github.com/LoyaltyOne/airmiles-web-bff",
          "Path":  "c:\\temp\\repos\\airmiles-web-bff",
          "Date":  "2022-11-21T18:05:47Z",
          "Repo":  "LoyaltyOne/airmiles-web-bff",
          "Topics":  "team-goat"
      },
      {
          "Name":  "auth0-pages",
          "Url":  "https://github.com/LoyaltyOne/auth0-pages",
          "Path":  "c:\\temp\\repos\\auth0-pages",
          "Date":  "2022-11-21T16:31:22Z",
          "Repo":  "LoyaltyOne/auth0-pages",
          "Topics":  "team-goat"
      },
      {
          "Name":  "rtc-amcash-infra",
          "Url":  "https://github.com/LoyaltyOne/rtc-amcash-infra",
          "Path":  "c:\\temp\\repos\\rtc-amcash-infra",
          "Date":  "2022-11-21T15:47:43Z",
          "Repo":  "LoyaltyOne/rtc-amcash-infra",
          "Topics":  "mobsrus"
      },
      {
          "Name":  "zoo",
          "Url":  "https://github.com/LoyaltyOne/zoo",
          "Path":  "c:\\temp\\repos\\zoo",
          "Date":  "2022-11-22T16:20:15Z",
          "Repo":  "LoyaltyOne/zoo",
          "Topics":  "team-goat"
      },
      {
          "Name":  "api-gateway-external-offer-state-api",
          "Url":  "https://github.com/LoyaltyOne/api-gateway-external-offer-state-api",
          "Path":  "c:\\temp\\repos\\api-gateway-external-offer-state-api",
          "Date":  "2022-11-18T18:36:13Z",
          "Repo":  "LoyaltyOne/api-gateway-external-offer-state-api",
          "Topics":  "team-things"
      },
      {
          "Name":  "notification-service-producer",
          "Url":  "https://github.com/LoyaltyOne/notification-service-producer",
          "Path":  "c:\\temp\\repos\\notification-service-producer",
          "Date":  "2022-11-18T18:08:43Z",
          "Repo":  "LoyaltyOne/notification-service-producer",
          "Topics":  [
                         "avengers",
                         "notification-service"
                     ]
      }
    ]'

    return $data[0..($numItems - 1)]
}

Main